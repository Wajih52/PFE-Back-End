package tn.weeding.agenceevenementielle.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import tn.weeding.agenceevenementielle.config.AuthenticationFacade;
import tn.weeding.agenceevenementielle.dto.reservation.*;
import tn.weeding.agenceevenementielle.entities.enums.StatutReservation;
import tn.weeding.agenceevenementielle.services.ReservationServiceInterface;

import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * ==========================================
 * CONTR√îLEUR REST POUR LA GESTION DES R√âSERVATIONS
 * Sprint 4 - Gestion des r√©servations (incluant devis)
 * ==========================================
 *
 * Workflow:
 * 1. CLIENT: Cr√©e un devis (POST /api/reservations/devis)
 * 2. ADMIN: Modifie et valide le devis (PUT /api/reservations/devis/{id}/modifier)
 * 3. CLIENT: Accepte ou refuse le devis (POST /api/reservations/devis/{id}/valider)
 * 4. ‚Üí R√©servation confirm√©e ou annul√©e
 */
@RestController
@RequestMapping("/api/reservations")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "Gestion des R√©servations", description = "APIs pour la gestion du cycle complet de r√©servation (devis + confirmation)")
@CrossOrigin(origins = "*")
public class ReservationController {

    private final ReservationServiceInterface reservationService;
    private final AuthenticationFacade authenticationFacade;

    // ============================================
    // PARTIE 1: CR√âATION DE DEVIS (CLIENT)
    // ============================================

    /**
     * üõí √âTAPE 1: Le client cr√©e un DEVIS (panier)
     * - S√©lectionne les produits avec dates
     * - V√©rification automatique de disponibilit√©
     * - G√©n√©ration du devis avec statut "En Attente"
     */
    @PostMapping("/devis")
    @PreAuthorize("hasRole('CLIENT')")
    @Operation(summary = "Cr√©er un devis (CLIENT)",
            description = "Le client s√©lectionne des produits et g√©n√®re un devis. Le syst√®me v√©rifie automatiquement la disponibilit√©.")
    public ResponseEntity<ReservationResponseDto> creerDevis(
            @Valid @RequestBody DevisRequestDto devisRequest) {

        log.info("üìù Nouvelle demande de devis re√ßue");

        String username = authenticationFacade.getAuthentication().getName();
        Long idUtilisateur = authenticationFacade.getCurrentUserId();

        ReservationResponseDto devis = reservationService.creerDevis(devisRequest, idUtilisateur, username);

        return ResponseEntity.status(HttpStatus.CREATED).body(devis);
    }

    /**
     * üîç V√©rifier la disponibilit√© d'un produit AVANT de cr√©er le devis
     * Permet d'afficher en temps r√©el si un produit est disponible
     */
    @PostMapping("/disponibilite/verifier")
    @PreAuthorize("hasAnyRole('CLIENT', 'ADMIN', 'EMPLOYE')")
    @Operation(summary = "V√©rifier la disponibilit√© d'un produit",
            description = "V√©rifie si un produit est disponible pour une p√©riode et une quantit√© donn√©es")
    public ResponseEntity<DisponibiliteResponseDto> verifierDisponibilite(
            @Valid @RequestBody VerificationDisponibiliteDto verificationDto) {

        DisponibiliteResponseDto disponibilite = reservationService.verifierDisponibilite(verificationDto);
        return ResponseEntity.ok(disponibilite);
    }

    /**
     * üîç V√©rifier la disponibilit√© de plusieurs produits en une fois
     */
    @PostMapping("/disponibilite/verifier-plusieurs")
    @PreAuthorize("hasAnyRole('CLIENT', 'ADMIN', 'EMPLOYE')")
    @Operation(summary = "V√©rifier la disponibilit√© de plusieurs produits",
            description = "V√©rifie la disponibilit√© d'une liste de produits en une seule requ√™te")
    public ResponseEntity<List<DisponibiliteResponseDto>> verifierDisponibilites(
            @Valid @RequestBody List<VerificationDisponibiliteDto> verifications) {

        List<DisponibiliteResponseDto> disponibilites = reservationService.verifierDisponibilites(verifications);
        return ResponseEntity.ok(disponibilites);
    }

    // ============================================
    // PARTIE 2: MODIFICATION DU DEVIS (ADMIN)
    // ============================================

    /**
     * üîß √âTAPE 2: L'ADMIN modifie et valide un DEVIS
     * - Peut modifier les prix unitaires
     * - Peut appliquer des remises (% ou montant fixe)
     * - Le devis reste en statut "En Attente" jusqu'√† la validation client
     */
    @PutMapping("/devis/{id}/modifier")
    @PreAuthorize("hasAnyRole('ADMIN', 'MANAGER')")
    @Operation(summary = "Modifier un devis (ADMIN)",
            description = "L'admin modifie les prix et applique des remises au devis")
    public ResponseEntity<ReservationResponseDto> modifierDevisParAdmin(
            @PathVariable Long id,
            @Valid @RequestBody DevisModificationDto modificationDto) {

        log.info("üîß Modification du devis ID: {} par l'admin", id);

        String username = authenticationFacade.getAuthentication().getName();
        modificationDto.setIdReservation(id);  // S'assurer que l'ID est bien d√©fini

        ReservationResponseDto devisModifie = reservationService.modifierDevisParAdmin(modificationDto, username);

        return ResponseEntity.ok(devisModifie);
    }

    /**
     * ‚ùå L'admin peut annuler un devis
     */
    @DeleteMapping("/devis/{id}/annuler")
    @PreAuthorize("hasAnyRole('ADMIN', 'MANAGER')")
    @Operation(summary = "Annuler un devis (ADMIN)",
            description = "L'admin annule un devis (ex: client ne r√©pond pas)")
    public ResponseEntity<Map<String, String>> annulerDevisParAdmin(
            @PathVariable Long id,
            @RequestParam(required = false) String motif) {

        log.info("‚ùå Annulation du devis ID: {} par l'admin", id);

        String username = authenticationFacade.getAuthentication().getName();
        reservationService.annulerDevisParAdmin(id, motif, username);

        return ResponseEntity.ok(Map.of("message", "Devis annul√© avec succ√®s"));
    }

    // ============================================
    // PARTIE 3: VALIDATION DU DEVIS (CLIENT)
    // ============================================

    /**
     * ‚úÖ √âTAPE 3: Le CLIENT valide ou refuse le devis
     * - Si accept√© ‚Üí R√©servation CONFIRM√âE + Instances r√©serv√©es
     * - Si refus√© ‚Üí R√©servation ANNUL√âE
     */
    @PostMapping("/devis/{id}/valider")
    @PreAuthorize("hasRole('CLIENT')")
    @Operation(summary = "Valider ou refuser un devis (CLIENT)",
            description = "Le client accepte (confirme la r√©servation) ou refuse le devis modifi√© par l'admin")
    public ResponseEntity<ReservationResponseDto> validerDevisParClient(
            @PathVariable Long id,
            @Valid @RequestBody ValidationDevisDto validationDto) {

        log.info("üéØ Validation du devis ID: {} par le client", id);

        String username = authenticationFacade.getAuthentication().getName();
        validationDto.setIdReservation(id);

        ReservationResponseDto reservation = reservationService.validerDevisParClient(validationDto, username);

        String message = validationDto.getAccepter()
                ? "üéâ R√©servation confirm√©e avec succ√®s!"
                : "‚ùå Devis refus√©";
        log.info(message);

        return ResponseEntity.ok(reservation);
    }

    // ============================================
    // PARTIE 4: CONSULTATION DES R√âSERVATIONS
    // ============================================

    /**
     * üìã R√©cup√©rer une r√©servation par son ID
     */
    @GetMapping("/{id}")
    @PreAuthorize("hasAnyRole('CLIENT', 'ADMIN', 'EMPLOYE')")
    @Operation(summary = "R√©cup√©rer une r√©servation par ID",
            description = "Obtenir les d√©tails complets d'une r√©servation")
    public ResponseEntity<ReservationResponseDto> getReservationById(@PathVariable Long id) {
        ReservationResponseDto reservation = reservationService.getReservationById(id);
        return ResponseEntity.ok(reservation);
    }

    /**
     * üìã R√©cup√©rer une r√©servation par sa r√©f√©rence
     */
    @GetMapping("/reference/{reference}")
    @PreAuthorize("hasAnyRole('CLIENT', 'ADMIN', 'EMPLOYE')")
    @Operation(summary = "R√©cup√©rer une r√©servation par r√©f√©rence",
            description = "Rechercher une r√©servation par son num√©ro de r√©f√©rence (ex: RES-2025-0001)")
    public ResponseEntity<ReservationResponseDto> getReservationByReference(@PathVariable String reference) {
        ReservationResponseDto reservation = reservationService.getReservationByReference(reference);
        return ResponseEntity.ok(reservation);
    }

    /**
     * üìã R√©cup√©rer TOUTES les r√©servations d'un client (ses propres r√©servations)
     */
    @GetMapping("/mes-reservations")
    @PreAuthorize("hasRole('CLIENT')")
    @Operation(summary = "Mes r√©servations (CLIENT)",
            description = "Le client consulte toutes ses r√©servations et devis")
    public ResponseEntity<List<ReservationResponseDto>> getMesReservations() {
        Long idUtilisateur = authenticationFacade.getCurrentUserId();
        List<ReservationResponseDto> reservations = reservationService.getReservationsByClient(idUtilisateur);
        return ResponseEntity.ok(reservations);
    }

    /**
     * üìã R√©cup√©rer les devis en attente d'un client
     */
    @GetMapping("/mes-devis-en-attente")
    @PreAuthorize("hasRole('CLIENT')")
    @Operation(summary = "Mes devis en attente (CLIENT)",
            description = "Le client consulte ses devis en attente de validation admin")
    public ResponseEntity<List<ReservationResponseDto>> getMesDevisEnAttente() {
        Long idUtilisateur = authenticationFacade.getCurrentUserId();
        List<ReservationResponseDto> devis = reservationService.getDevisEnAttenteByClient(idUtilisateur);
        return ResponseEntity.ok(devis);
    }

    /**
     * üìã R√©cup√©rer TOUTES les r√©servations (ADMIN)
     */
    @GetMapping
    @PreAuthorize("hasAnyRole('ADMIN', 'MANAGER', 'EMPLOYE')")
    @Operation(summary = "Toutes les r√©servations (ADMIN)",
            description = "L'admin consulte toutes les r√©servations de tous les clients")
    public ResponseEntity<List<ReservationResponseDto>> getAllReservations() {
        List<ReservationResponseDto> reservations = reservationService.getAllReservations();
        return ResponseEntity.ok(reservations);
    }

    /**
     * üìã R√©cup√©rer tous les devis en attente (ADMIN)
     */
    @GetMapping("/devis-en-attente")
    @PreAuthorize("hasAnyRole('ADMIN', 'MANAGER')")
    @Operation(summary = "Tous les devis en attente (ADMIN)",
            description = "L'admin consulte tous les devis en attente de validation")
    public ResponseEntity<List<ReservationResponseDto>> getAllDevisEnAttente() {
        List<ReservationResponseDto> devis = reservationService.getAllDevisEnAttente();
        return ResponseEntity.ok(devis);
    }

    /**
     * üìã R√©cup√©rer les r√©servations par statut
     */
    @GetMapping("/statut/{statut}")
    @PreAuthorize("hasAnyRole('ADMIN', 'MANAGER', 'EMPLOYE')")
    @Operation(summary = "Filtrer par statut (ADMIN)",
            description = "R√©cup√©rer toutes les r√©servations d'un statut donn√© (EnAttente, confirme, annule)")
    public ResponseEntity<List<ReservationResponseDto>> getReservationsByStatut(
            @PathVariable StatutReservation statut) {

        List<ReservationResponseDto> reservations = reservationService.getReservationsByStatut(statut);
        return ResponseEntity.ok(reservations);
    }

    // ============================================
    // PARTIE 5: RECHERCHE AVANC√âE
    // ============================================

    /**
     * üîç Recherche multicrit√®res de r√©servations
     */
    @PostMapping("/recherche")
    @PreAuthorize("hasAnyRole('ADMIN', 'MANAGER', 'EMPLOYE')")
    @Operation(summary = "Recherche multicrit√®res (ADMIN)",
            description = "Rechercher des r√©servations selon plusieurs crit√®res")
    public ResponseEntity<List<ReservationResponseDto>> searchReservations(
            @Valid @RequestBody ReservationSearchDto searchDto) {

        List<ReservationResponseDto> reservations = reservationService.searchReservations(searchDto);
        return ResponseEntity.ok(reservations);
    }

    /**
     * üìÖ R√©cup√©rer les r√©servations dans une p√©riode
     */
    @GetMapping("/periode")
    @PreAuthorize("hasAnyRole('ADMIN', 'MANAGER', 'EMPLOYE')")
    @Operation(summary = "R√©servations sur une p√©riode (ADMIN)",
            description = "R√©cup√©rer les r√©servations entre deux dates")
    public ResponseEntity<List<ReservationResponseDto>> getReservationsByPeriode(
            @RequestParam @DateTimeFormat(pattern = "yyyy-MM-dd") Date dateDebut,
            @RequestParam @DateTimeFormat(pattern = "yyyy-MM-dd") Date dateFin) {

        List<ReservationResponseDto> reservations =
                reservationService.getReservationsByPeriode(dateDebut, dateFin);
        return ResponseEntity.ok(reservations);
    }

    /**
     * üìÖ R√©servations confirm√©es √† venir
     */
    @GetMapping("/a-venir")
    @PreAuthorize("hasAnyRole('ADMIN', 'MANAGER', 'EMPLOYE')")
    @Operation(summary = "R√©servations √† venir (ADMIN)",
            description = "R√©cup√©rer les r√©servations confirm√©es futures")
    public ResponseEntity<List<ReservationResponseDto>> getReservationsAVenir() {
        List<ReservationResponseDto> reservations = reservationService.getReservationsAVenir();
        return ResponseEntity.ok(reservations);
    }

    /**
     * üìÖ R√©servations en cours
     */
    @GetMapping("/en-cours")
    @PreAuthorize("hasAnyRole('ADMIN', 'MANAGER', 'EMPLOYE')")
    @Operation(summary = "R√©servations en cours (ADMIN)",
            description = "R√©cup√©rer les r√©servations actuellement actives")
    public ResponseEntity<List<ReservationResponseDto>> getReservationsEnCours() {
        List<ReservationResponseDto> reservations = reservationService.getReservationsEnCours();
        return ResponseEntity.ok(reservations);
    }

    /**
     * üìÖ R√©servations pass√©es
     */
    @GetMapping("/passees")
    @PreAuthorize("hasAnyRole('ADMIN', 'MANAGER', 'EMPLOYE')")
    @Operation(summary = "R√©servations pass√©es (ADMIN)",
            description = "R√©cup√©rer l'historique des r√©servations termin√©es")
    public ResponseEntity<List<ReservationResponseDto>> getReservationsPassees() {
        List<ReservationResponseDto> reservations = reservationService.getReservationsPassees();
        return ResponseEntity.ok(reservations);
    }

    // ============================================
    // PARTIE 6: ANNULATION ET MODIFICATION
    // ============================================

    /**
     * ‚ùå Le client annule sa r√©servation
     */
    @DeleteMapping("/{id}/annuler")
    @PreAuthorize("hasRole('CLIENT')")
    @Operation(summary = "Annuler une r√©servation (CLIENT)",
            description = "Le client annule sa r√©servation (si pas encore livr√©e)")
    public ResponseEntity<Map<String, String>> annulerReservationParClient(
            @PathVariable Long id,
            @RequestParam(required = false) String motif) {

        String username = authenticationFacade.getAuthentication().getName();
        reservationService.annulerReservationParClient(id, motif, username);

        return ResponseEntity.ok(Map.of("message", "R√©servation annul√©e avec succ√®s"));
    }

    // ============================================
    // PARTIE 7: STATISTIQUES ET RAPPORTS
    // ============================================

    /**
     * üìä Statistiques globales des r√©servations
     */
    @GetMapping("/statistiques")
    @PreAuthorize("hasAnyRole('ADMIN', 'MANAGER')")
    @Operation(summary = "Statistiques des r√©servations (ADMIN)",
            description = "Obtenir les statistiques globales (nombre, CA, etc.)")
    public ResponseEntity<ReservationSummaryDto> getStatistiques() {
        ReservationSummaryDto stats = reservationService.getStatistiquesReservations();
        return ResponseEntity.ok(stats);
    }

    /**
     * üìä Statistiques d'un client
     */
    @GetMapping("/statistiques/client/{idClient}")
    @PreAuthorize("hasAnyRole('ADMIN', 'MANAGER')")
    @Operation(summary = "Statistiques d'un client (ADMIN)",
            description = "Obtenir les statistiques de r√©servation d'un client sp√©cifique")
    public ResponseEntity<ReservationSummaryDto> getStatistiquesClient(@PathVariable Long idClient) {
        ReservationSummaryDto stats = reservationService.getStatistiquesReservationsClient(idClient);
        return ResponseEntity.ok(stats);
    }

    /**
     * üí∞ Chiffre d'affaires sur une p√©riode
     */
    @GetMapping("/chiffre-affaires")
    @PreAuthorize("hasAnyRole('ADMIN', 'MANAGER')")
    @Operation(summary = "Chiffre d'affaires sur p√©riode (ADMIN)",
            description = "Calculer le CA g√©n√©r√© sur une p√©riode donn√©e")
    public ResponseEntity<Map<String, Double>> getChiffreAffairesPeriode(
            @RequestParam @DateTimeFormat(pattern = "yyyy-MM-dd") Date dateDebut,
            @RequestParam @DateTimeFormat(pattern = "yyyy-MM-dd") Date dateFin) {

        Double ca = reservationService.calculateChiffreAffairesPeriode(dateDebut, dateFin);
        return ResponseEntity.ok(Map.of("chiffreAffaires", ca));
    }

    // ============================================
    // PARTIE 8: ALERTES ET NOTIFICATIONS
    // ============================================

    /**
     * üîî R√©servations qui commencent bient√¥t
     */
    @GetMapping("/alertes/commencant-dans/{nbreJours}")
    @PreAuthorize("hasAnyRole('ADMIN', 'MANAGER', 'EMPLOYE')")
    @Operation(summary = "Alertes de livraisons prochaines (ADMIN)",
            description = "R√©servations qui commencent dans N jours (pour pr√©parer les livraisons)")
    public ResponseEntity<List<ReservationResponseDto>> getReservationsCommencantDans(
            @PathVariable int nbreJours) {

        List<ReservationResponseDto> reservations =
                reservationService.getReservationsCommencantDansNJours(nbreJours);
        return ResponseEntity.ok(reservations);
    }

    /**
     * üîî R√©servations qui se terminent bient√¥t
     */
    @GetMapping("/alertes/finissant-dans/{nbreJours}")
    @PreAuthorize("hasAnyRole('ADMIN', 'MANAGER', 'EMPLOYE')")
    @Operation(summary = "Alertes de retours prochains (ADMIN)",
            description = "R√©servations qui se terminent dans N jours (pour organiser les retours)")
    public ResponseEntity<List<ReservationResponseDto>> getReservationsFinissantDans(
            @PathVariable int nbreJours) {

        List<ReservationResponseDto> reservations =
                reservationService.getReservationsFinissantDansNJours(nbreJours);
        return ResponseEntity.ok(reservations);
    }

    /**
     * üîî Devis expir√©s (pour relance client)
     */
    @GetMapping("/alertes/devis-expires/{nbreJours}")
    @PreAuthorize("hasAnyRole('ADMIN', 'MANAGER')")
    @Operation(summary = "Devis expir√©s (ADMIN)",
            description = "Devis en attente depuis plus de N jours (n√©cessitent une relance)")
    public ResponseEntity<List<ReservationResponseDto>> getDevisExpires(
            @PathVariable int nbreJours) {

        List<ReservationResponseDto> devis = reservationService.getDevisExpires(nbreJours);
        return ResponseEntity.ok(devis);
    }

    /**
     * üí∞ R√©servations avec paiement incomplet
     */
    @GetMapping("/alertes/paiements-incomplets")
    @PreAuthorize("hasAnyRole('ADMIN', 'MANAGER')")
    @Operation(summary = "Alertes paiements incomplets (ADMIN)",
            description = "R√©servations confirm√©es avec paiement incomplet")
    public ResponseEntity<List<ReservationResponseDto>> getReservationsAvecPaiementIncomplet() {
        List<ReservationResponseDto> reservations =
                reservationService.getReservationsAvecPaiementIncomplet();
        return ResponseEntity.ok(reservations);
    }
}