package tn.weeding.agenceevenementielle.services;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import tn.weeding.agenceevenementielle.dto.authentification.PasswordResetDto;
import tn.weeding.agenceevenementielle.dto.authentification.PasswordResetRequestDto;
import tn.weeding.agenceevenementielle.entities.Utilisateur;
import tn.weeding.agenceevenementielle.exceptions.CustomException;
import tn.weeding.agenceevenementielle.repository.UtilisateurRepository;


import java.time.LocalDateTime;
import java.util.UUID;

@Service
@RequiredArgsConstructor
@Slf4j
public class PasswordResetServiceImpl implements PasswordResetService {

    private final UtilisateurRepository utilisateurRepository;
    private final EmailService emailService;
    private final PasswordEncoder passwordEncoder;

    // Dur√©e de validit√© du token : 30 minutes
    private static final int TOKEN_EXPIRATION_MINUTES = 30;

    @Override
    @Transactional
    public void demanderReinitialisationMotDePasse(PasswordResetRequestDto request) {
        log.info("üîë Demande de r√©initialisation pour: {}", request.getEmail());

        // 1. Chercher l'utilisateur par email
        Utilisateur utilisateur = utilisateurRepository.findByEmail(request.getEmail())
                .orElseThrow(() -> {
                    log.warn("‚ö†Ô∏è Email non trouv√© : {}", request.getEmail());
                     return new CustomException("Aucun compte associ√© √† cet email");});

        // 2 V√©rifier si le compte est activ√©
        if (Boolean.FALSE.equals(utilisateur.getActivationCompte())) {
            throw new CustomException("Ce compte n'est pas encore activ√©. V√©rifiez vos emails.");
        }

        // 3 Les utilisateurs Google peuvent cr√©er/modifier un mot de passe
        if (Boolean.TRUE.equals(utilisateur.getGoogleAccount())) {
            log.info("üîê Compte Google d√©tect√© : activation de l'authentification hybride pour {}",
                    utilisateur.getEmail());
            // On continue le processus normalement
            // L'utilisateur pourra cr√©er un mot de passe ET garder Google comme option
        }

        emailService.checkEmailDelay(utilisateur);


        // 4. G√©n√©rer un token unique
        String resetToken = UUID.randomUUID().toString();

        // 5. D√©finir l'expiration (30 minutes)
        LocalDateTime expiration = LocalDateTime.now().plusMinutes(TOKEN_EXPIRATION_MINUTES);

        // 6. Sauvegarder le token et l'expiration
        utilisateur.setResetPasswordToken(resetToken);
        utilisateur.setResetPasswordExpiration(expiration);
        utilisateur.setDernierEnvoiEmail(LocalDateTime.now());
        utilisateurRepository.save(utilisateur);

        log.info("‚úÖ Token g√©n√©r√© et sauvegard√© pour : {}", utilisateur.getEmail());

        // 7. Construire le lien de r√©initialisation
        String resetLink = "http://localhost:4200/auth/reset-password?token=" + resetToken;

        // 6. Envoyer l'email
        String emailContent = emailService.construireEmailResetPassword(utilisateur.getPrenom(), resetLink);

        emailService.sendEmail(
                utilisateur.getEmail(),
                "R√©initialisation de votre mot de passe",
                emailContent
        );

        log.info("‚úÖ Email de r√©initialisation envoy√© √†: {}", utilisateur.getEmail());
    }

    @Override
    @Transactional
    public void reinitialiserMotDePasse(PasswordResetDto request) {
        log.info("üîÑ Tentative de r√©initialisation avec le token");

        // 1. Chercher l'utilisateur par token
        Utilisateur utilisateur = utilisateurRepository.findByResetPasswordToken(request.getToken())
                .orElseThrow(() -> {
                    log.warn("‚ö†Ô∏è Token invalide ou expir√©");
                    return new CustomException("Token invalide ou expir√©");
                });

        // 2. V√©rifier si le token a expir√©
        if (utilisateur.getResetPasswordExpiration().isBefore(LocalDateTime.now())) {
            log.warn("‚è∞ Token expir√© pour : {}", utilisateur.getEmail());
            throw new CustomException("Le token a expir√©. Veuillez refaire une demande.");
        }

        // 3. Encoder et sauvegarder le nouveau mot de passe
        String nouveauMotDePasseEncode = passwordEncoder.encode(request.getNouveauMotDePasse());
        utilisateur.setMotDePasse(nouveauMotDePasseEncode);

        // 4. Nettoyer le token (pour s√©curit√©)
        utilisateur.setResetPasswordToken(null);
        utilisateur.setResetPasswordExpiration(null);


        // 5 Si c'√©tait un compte Google, il devient maintenant hybride
        if (Boolean.TRUE.equals(utilisateur.getGoogleAccount())) {
            log.info("üîÑ Compte Google converti en compte hybride (Google + Mot de passe) pour : {}",
                    utilisateur.getEmail());
        }

        utilisateurRepository.save(utilisateur);

        log.info("‚úÖ Mot de passe r√©initialis√© avec succ√®s pour: {}", utilisateur.getEmail());

        // 6 Envoyer un email de confirmation
        emailService.sendEmail(
                utilisateur.getEmail(),
                "Mot de passe modifi√©",
                emailService.construireEmailConfirmation(utilisateur.getPrenom())
        );
    }


}
