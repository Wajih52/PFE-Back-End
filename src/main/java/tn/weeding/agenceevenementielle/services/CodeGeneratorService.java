package tn.weeding.agenceevenementielle.services;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import tn.weeding.agenceevenementielle.repository.UtilisateurRepository;

import java.util.Optional;

@Service
@RequiredArgsConstructor
@Slf4j
public class CodeGeneratorService {

    private final UtilisateurRepository utilisateurRepository;


    @Transactional(readOnly = true)
    public String generateNextCode(String typeRole) {

        // D√©terminer le pr√©fixe selon le r√¥le
        String prefix = determinePrefix(typeRole);

        // R√©cup√©rer le dernier code avec ce pr√©fixe
        Optional<String> lastCode = utilisateurRepository.findLastCodeByPrefix(prefix);

        if (lastCode.isPresent()) {
            // Extraire le num√©ro et incr√©menter
            String code = lastCode.get();
            int number = extractNumber(code, prefix);
            int nextNumber = number + 1;

            String newCode = String.format("%s%04d", prefix, nextNumber);
            log.debug("üìä Dernier code {} : {} ‚Üí Nouveau : {}", typeRole, code, newCode);
            return newCode;

        } else {
            // Premier utilisateur de ce type
            String firstCode = prefix + "0001";
            log.debug("üÜï Premier code {} : {}", typeRole, firstCode);
            return firstCode;
        }
    }
    /**
     * D√©termine le pr√©fixe selon le type de r√¥le
     * Prend les deux premiers caract√®res du nom du r√¥le en majuscule
     */
    public String determinePrefix(String typeRole) {
        if (typeRole == null || typeRole.trim().isEmpty()) {
            return "XX"; // Par d√©faut CLIENT
        }

        String trimmedRole = typeRole.trim();

        if (trimmedRole.length() == 1) {
            // Si le r√¥le n'a qu'un seul caract√®re, on le duplique
            String singleChar = trimmedRole.toUpperCase();
            return singleChar + singleChar;
        } else {
            // Prend les deux premiers caract√®res en majuscule
            return trimmedRole.substring(0, 2).toUpperCase();
        }
    }

    /**
     * Extrait le num√©ro depuis un code utilisateur
     * Ex: "CL005" ‚Üí 5, "AD012" ‚Üí 12
     */
    private int extractNumber(String code, String prefix) {
        try {
            // Retirer le pr√©fixe et parser le num√©ro
            String numberPart = code.substring(prefix.length());
            return Integer.parseInt(numberPart);
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Impossible d'extraire le num√©ro du code : {}. Retour √† 0.", code);
            return 0;
        }
    }

    /**
     * G√©n√®re un code avec un pr√©fixe sp√©cifique (pour les cas particuliers)
     */
    public String generateCodeWithPrefix(String prefix) {
        Optional<String> lastCode = utilisateurRepository.findLastCodeByPrefix(prefix);

        if (lastCode.isPresent()) {
            int number = extractNumber(lastCode.get(), prefix);
            return String.format("%s%03d", prefix, number + 1);
        } else {
            return prefix + "001";
        }
    }
}